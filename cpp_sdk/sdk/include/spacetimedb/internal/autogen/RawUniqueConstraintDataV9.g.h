// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb codegen.

#pragma once

#include <cstdint>
#include <string>
#include <vector>
#include <optional>
#include <memory>
#include "spacetimedb/bsatn/bsatn.h"

namespace SpacetimeDb::Internal {

struct RawUniqueConstraintDataV9 {
    std::vector<uint16_t> columns;

    RawUniqueConstraintDataV9() = default;

    RawUniqueConstraintDataV9(std::vector<uint16_t> columns)
        : columns(columns) {}

    // BSATN serialization support
    void bsatn_serialize(SpacetimeDb::bsatn::Writer& writer) const;
    void bsatn_deserialize(SpacetimeDb::bsatn::Reader& reader);

    // Static factory method for BSATN deserialization
    static RawUniqueConstraintDataV9 from_bsatn(SpacetimeDb::bsatn::Reader& reader) {
        RawUniqueConstraintDataV9 result;
        result.bsatn_deserialize(reader);
        return result;
    }
};
} // namespace SpacetimeDb::Internal
// Type registration macro
#define SPACETIMEDB_REGISTER_TYPE_RawUniqueConstraintDataV9 \
    namespace spacetimedb { \
    namespace detail { \
    template<> \
    struct TypeRegistrar<SpacetimeDb::Internal::RawUniqueConstraintDataV9> { \
        static AlgebraicTypeRef register_type(TypeContext& ctx) { \
            return ctx.add(AlgebraicType::Product(std::make_unique<ProductType>(std::vector<ProductType::Element>{
    {"columns", AlgebraicType::Array(std::make_unique<ArrayType>(AlgebraicType::U16())))}
}))); \
        } \
    }; \
    } /* namespace detail */ \
    } /* namespace spacetimedb */

