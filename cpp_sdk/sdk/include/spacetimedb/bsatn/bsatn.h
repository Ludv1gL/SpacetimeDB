#ifndef SPACETIMEDB_BSATN_MAIN_H // Changed guard to avoid conflict if old bsatn.h was somehow included
#define SPACETIMEDB_BSATN_MAIN_H

/**
 * @file bsatn.h
 * @brief Main include file for the BSATN (Binary SpacetimeDB Abstract Type Notation) library components.
 * @details This file includes the core components for BSATN serialization and deserialization:
 *          - bsatn::Reader
 *          - bsatn::Writer
 *          - Placeholder types for 128-bit integers.
 *          - Generic bsatn::serialize and bsatn::deserialize<T> free function templates and their overloads/specializations.
 *          - Algebraic type system for type metadata
 *          - Serialization traits and interfaces
 *          - Type registry for managing types
 *          - Sum type support for discriminated unions
 */

#include "reader.h"      // Defines bsatn::Reader
#include "writer.h"      // Defines bsatn::Writer and primitive bsatn::serialize overloads
#include "uint128_placeholder.h" // Defines SpacetimeDB::Types::uint128_t_placeholder etc.
#include "algebraic_type.h"      // Algebraic type system
#include "traits.h"              // Serialization traits and interfaces
#include "type_registry.h"       // Type registry
#include "sum_type.h"            // Sum types and Option
#include "bsatn_compat.h"        // Compatibility layer for namespace and type conversions

// The bsatn namespace contains the core Reader and Writer classes,
// along with global `serialize` overloads for primitives and `deserialize<T>` specializations for primitives.
//
// The SpacetimeDB::bsatn namespace is where macros like SPACETIMEDB_TYPE_STRUCT_WITH_FIELDS
// generate specific (de)serialization functions for user-defined types, for example:
//   - void SpacetimeDB::bsatn::serialize(bsatn::Writer& writer, const MyType& value);
//   - MyType SpacetimeDB::bsatn::deserialize_MyType(bsatn::Reader& reader);
//
// Additionally, a specialization for the generic bsatn::deserialize is generated by macros:
//   namespace bsatn {
//       template<>
//       inline MyType deserialize<MyType>(bsatn::Reader& reader) {
//           return SpacetimeDB::bsatn::deserialize_MyType(reader);
//       }
//   }
// This allows user code and SDK internals to uniformly use `bsatn::serialize(writer, obj)`
// and `obj = bsatn::deserialize<MyType>(reader)`.

#endif // SPACETIMEDB_BSATN_MAIN_H
