#ifndef SPACETIMEDB_SDK_DATABASE_H
#define SPACETIMEDB_SDK_DATABASE_H

#include <string>
#include <stdexcept> // For std::runtime_error
#include <spacetimedb/sdk/table.h> // For Table<T>
#include <spacetimedb/abi/spacetimedb_abi.h> // For ABI function calls
#include <spacetimedb/bsatn_all.h> // For BSATN serialization

namespace spacetimedb {
namespace sdk {

class Database {
public:
    Database();

    template<typename T>
    Table<T> get_table(const std::string& table_name) {
        // ABI: uint16_t _get_table_id(const uint8_t *name_ptr, size_t name_len, uint32_t *out_table_id_ptr)

        uint32_t table_id = 0;
        uint16_t error_code = _get_table_id(
            reinterpret_cast<const uint8_t*>(table_name.c_str()),
            table_name.length(),
            &table_id
        );

        if (error_code != 0) {
            throw std::runtime_error("Database::get_table: _get_table_id ABI call failed for table '" +
                                     table_name + "' with error code " + std::to_string(error_code));
        }

        // It's possible that an error_code of 0 still means "not found" if table_id is a sentinel like 0.
        // This depends on the ABI contract for _get_table_id. Assuming 0 is an invalid ID if no error.
        if (table_id == 0 && error_code == 0) {
            throw std::runtime_error("Table not found: " + table_name + " (table_id resolved to 0 without ABI error)");
        }

        return Table<T>(table_id);
    }
};


// --- Free functions for direct table operations ---

/**
 * @brief Inserts a row into the specified table.
 * @details This function serializes the provided `row_data` object into BSATN format
 *          and calls the host environment to perform the table insertion.
 * @tparam TRow The C++ type of the row. A corresponding `SpacetimeDB::bsatn::serialize` function must exist
 *              (typically generated by SDK macros).
 * @param table_name The name of the target table in the SpacetimeDB schema.
 * @param row_data The row object to insert.
 * @return `true` if the host reported success (Status code 0), `false` otherwise.
 * @ingroup sdk_database sdk_table_ops
 */
template<typename TRow>
bool table_insert(const std::string& table_name, const TRow& row_data) {
    // Assumes SpacetimeDB::bsatn::serialize is available for TRow
    // and that bsatn::Writer is included via bsatn/bsatn.h (which should be pulled in by spacetimedb_abi.h or other sdk headers)
    // If not, #include <spacetimedb/bsatn/bsatn.h> might be needed here.
    // And #include <spacetimedb/abi/common_defs.h> for Status

    SpacetimeDb::bsatn::Writer writer;
    SpacetimeDb::bsatn::serialize(writer, row_data);
    const auto& buffer = writer.get_buffer();

    // Temporarily disabled for debugging
    return false;
}

/**
 * @brief Deletes a row from the specified table using its primary key.
 * @details This function serializes the provided `pk_value` into BSATN format
 *          and calls the host environment to perform the deletion.
 * @tparam TPK The C++ type of the primary key. A corresponding `SpacetimeDB::bsatn::serialize` function must exist.
 * @param table_name The name of the target table in the SpacetimeDB schema.
 * @param pk_value The primary key value of the row to delete.
 * @return `true` if the host reported success (Status code 0), `false` otherwise.
 * @ingroup sdk_database sdk_table_ops
 */
template<typename TPK>
bool table_delete_by_pk(const std::string& table_name, const TPK& pk_value) {
    SpacetimeDb::bsatn::Writer writer;
    SpacetimeDb::bsatn::serialize(writer, pk_value);
    const auto& buffer = writer.get_buffer();

    // Temporarily disabled for debugging
    return false;
}


} // namespace sdk
} // namespace spacetimedb

#endif // SPACETIMEDB_SDK_DATABASE_H
