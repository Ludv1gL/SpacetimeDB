#ifndef SPACETIME_SDK_RUNTIME_H
#define SPACETIME_SDK_RUNTIME_H

/**
 * @file spacetime_sdk_runtime.h
 * @brief Defines the SpacetimeDB C++ SDK runtime functions for interacting with the host environment.
 * @details This includes functions for logging, table operations (insert, delete),
 *          and potentially context retrieval and scheduling future events/reducers.
 *          These functions typically wrap lower-level `extern "C"` ABI calls defined
 *          in `spacetime_host_abi.h`.
 */

#include <string>
#include <vector>
#include <optional>
#include "bsatn_writer.h" // For bsatn::Writer
#include "bsatn_reader.h" // For bsatn::Reader (if needed for return values)
// Include serialize functions for user types - this implies that generated type headers or a global types header is available
// For now, assume global `SpacetimeDB::bsatn::serialize` and `deserialize_TypeName` are available.
// We might need to include "spacetime_test_types.h" or similar if we directly use types from there in examples.

// Forward declare host ABI functions to avoid direct include of spacetime_host_abi.h in all user files
// This is a common practice to decouple user-facing SDK headers from raw ABI headers.
// However, for implementation in .cpp, it will need the actual extern "C" declarations.
// For a header-only library style, one might include spacetime_host_abi.h here.
// Let's assume for now that the .cpp file will include spacetime_host_abi.h
// and these are just declarations of the wrapper functions.

namespace SpacetimeDB {

/** @brief Defines logging levels for SDK logging functions. */
enum class LogLevel : uint8_t {
    Error = 0, ///< Critical errors that might prevent further operation.
    Warn = 1,  ///< Warnings about potential issues or unusual situations.
    Info = 2,  ///< General informational messages about SDK/module operation.
    Debug = 3, ///< Detailed debugging information.
    Trace = 4  ///< Highly detailed trace information, potentially very verbose.
};

/**
 * @brief Logs a message through the SpacetimeDB host environment.
 * @param level The severity level of the message.
 * @param message The message string to log.
 * @ingroup sdk_runtime
 */
void log(LogLevel level, const std::string& message);

/** @brief Logs an error message. Convenience wrapper for `log(LogLevel::Error, ...)`. @ingroup sdk_runtime */
void log_error(const std::string& message);
/** @brief Logs a warning message. Convenience wrapper for `log(LogLevel::Warn, ...)`. @ingroup sdk_runtime */
void log_warn(const std::string& message);
/** @brief Logs an informational message. Convenience wrapper for `log(LogLevel::Info, ...)`. @ingroup sdk_runtime */
void log_info(const std::string& message);
/** @brief Logs a debug message. Convenience wrapper for `log(LogLevel::Debug, ...)`. @ingroup sdk_runtime */
void log_debug(const std::string& message);
/** @brief Logs a trace message. Convenience wrapper for `log(LogLevel::Trace, ...)`. @ingroup sdk_runtime */
void log_trace(const std::string& message);


// Table Operations
// Note: These wrappers assume that a global `SpacetimeDB::bsatn::serialize(bsatn::Writer&, const T&)`
// function is available for TRow and TPK types. This is typically generated by the
// `SPACETIMEDB_TYPE_STRUCT_WITH_FIELDS` or `SPACETIMEDB_TYPE_ENUM` macros for user-defined types,
// or provided by the SDK for primitive types.

/**
 * @brief Inserts a row into the specified table.
 * @details This function serializes the provided `row_data` object into BSATN format
 *          and calls the host environment to perform the table insertion.
 * @tparam TRow The C++ type of the row. A corresponding `SpacetimeDB::bsatn::serialize` function must exist.
 * @param table_name The name of the target table in the SpacetimeDB schema.
 * @param row_data The row object to insert.
 * @return `true` if the host reported success (typically return code 0), `false` otherwise.
 * @ingroup sdk_runtime sdk_table_ops
 */
template<typename TRow>
bool table_insert(const std::string& table_name, const TRow& row_data);

/**
 * @brief Deletes a row from the specified table using its primary key.
 * @details This function serializes the provided `pk_value` into BSATN format
 *          and calls the host environment to perform the deletion.
 * @tparam TPK The C++ type of the primary key. A corresponding `SpacetimeDB::bsatn::serialize` function must exist.
 * @param table_name The name of the target table in the SpacetimeDB schema.
 * @param pk_value The primary key value of the row to delete.
 * @return `true` if the host reported success (typically return code 0), `false` otherwise.
 * @ingroup sdk_runtime sdk_table_ops
 */
template<typename TPK>
bool table_delete_by_pk(const std::string& table_name, const TPK& pk_value);


// Transaction Context (Illustrative - depends on actual host ABI for these)
// uint64_t context_get_transaction_id();
// std::vector<std::byte> context_get_sender_identity();
// uint64_t context_get_timestamp();

// Scheduling (Illustrative)
// template<typename... Args>
// bool schedule_reducer(uint64_t nanoseconds_from_now, const std::string& reducer_name, const Args&... args);

} // namespace SpacetimeDB

// Template implementations need to be in the header or an included .tpp file
// For simplicity, we'll put them here.

#include "spacetime_host_abi.h" // Required for the implementations of template functions

namespace SpacetimeDB {

template<typename TRow>
bool table_insert(const std::string& table_name, const TRow& row_data) {
    bsatn::Writer writer;
    // Assume SpacetimeDB::bsatn::serialize exists for TRow due to macros
    SpacetimeDB::bsatn::serialize(writer, row_data);
    const auto& buffer = writer.get_buffer();
    return spacetimedb_host_table_insert(
               table_name.c_str(), static_cast<uint32_t>(table_name.length()),
               reinterpret_cast<const unsigned char*>(buffer.data()), static_cast<uint32_t>(buffer.size())) == 0;
}

template<typename TPK>
bool table_delete_by_pk(const std::string& table_name, const TPK& pk_value) {
    bsatn::Writer writer;
    // Assume SpacetimeDB::bsatn::serialize exists for TPK
    SpacetimeDB::bsatn::serialize(writer, pk_value);
    const auto& buffer = writer.get_buffer();
    return spacetimedb_host_table_delete_by_pk(
               table_name.c_str(), static_cast<uint32_t>(table_name.length()),
               reinterpret_cast<const unsigned char*>(buffer.data()), static_cast<uint32_t>(buffer.size())) == 0;
}

// Example for scheduling if it were enabled:
/*
template<typename... Args>
bool schedule_reducer(uint64_t nanoseconds_from_now, const std::string& reducer_name, const Args&... args) {
    bsatn::Writer writer;
    // This relies on a fold expression or similar to serialize all args
    // (writer.serialize(args), ...); // This specific syntax might need adjustment
    // For now, let's assume a helper or direct calls for each arg if fixed.
    // This is complex to make fully generic here without more infrastructure.
    // Placeholder:
    // SpacetimeDB::bsatn::serialize_args(writer, args...); // serialize_args would be a new helper

    // If we want to serialize arguments one by one:
    // ( (void)SpacetimeDB::bsatn::serialize(writer, args), ... ); // C++17 fold expression

    const auto& buffer = writer.get_buffer();
    return spacetimedb_host_schedule_reducer(
        nanoseconds_from_now,
        reducer_name.c_str(), static_cast<uint32_t>(reducer_name.length()),
        reinterpret_cast<const unsigned char*>(buffer.data()), static_cast<uint32_t>(buffer.size())
    ) == 0;
}
*/

} // namespace SpacetimeDB


#endif // SPACETIME_SDK_RUNTIME_H
