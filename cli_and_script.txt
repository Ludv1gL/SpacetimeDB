# --- CLI Specification ---

## `spacetime` CLI Enhancement: Publishing Pre-compiled WASM Modules

This specification outlines a new feature for the `spacetime` CLI to allow users to publish C++ (and potentially other language) modules that have already been compiled to WebAssembly (`.wasm`).

### Command Structure

```
spacetime publish --module-path <path_to_module_file> --name <database_name_or_address> [options]
```

To better accommodate different types of modules (source, pre-compiled WASM, etc.) and align with potential future needs, we can refine the publish command. If we are introducing a specific flag for WASM:

```
spacetime publish --wasm-file <path_to_wasm_file> --name <database_name_or_address> [options]
```
Or, more generally, the CLI could inspect the file provided by `--module-path` (if that's an existing flag) or introduce a `--type` flag. For clarity and directness, `--wasm-file` is preferred if this is a distinct new workflow.

Let's assume a dedicated flag for this use case:

**Proposed Command:**

```bash
spacetime publish --wasm-file <path_to_wasm_file> --name <db_name_or_address> [optional_flags]
```

### Arguments

*   `--wasm-file <path_to_wasm_file>`:
    *   **Required** for this mode of operation.
    *   Specifies the path to the user's pre-compiled WebAssembly module (e.g., `my_module.wasm`).
    *   The CLI should not assume any specific filename, only that it's a valid path.

*   `--name <db_name_or_address>`:
    *   **Required.**
    *   Specifies the unique name or address under which the SpacetimeDB database module will be published. This aligns with existing `publish` command behavior.

*   `[optional_flags]`:
    *   Any other existing optional flags supported by `spacetime publish` should be compatible (e.g., `--credentials <path>`, `--host <host_url>`, versioning flags, etc.).
    *   No new flags specific to WASM compilation (like optimization levels, compiler paths) should be added here, as the WASM is pre-compiled.

### Behavior

1.  **Invocation:** The user invokes `spacetime publish` with the `--wasm-file` and `--name` arguments.
2.  **WASM File Validation:**
    *   The CLI must verify that the file specified by `<path_to_wasm_file>` exists and is readable.
    *   Optional: The CLI *could* perform a basic validation to check if the file appears to be a WASM binary (e.g., by checking the magic number `\0asm`). More advanced validation (like checking for required exports/imports if the SpacetimeDB host has specific expectations beyond what the SDK enforces) could be considered but might be complex for the CLI. For now, basic file existence and readability are key.
3.  **No Compilation:** The CLI must *not* attempt to compile the provided `.wasm` file. It is treated as a ready-to-deploy artifact.
4.  **Publishing Process:**
    *   The CLI should take the WASM file content and proceed with the standard SpacetimeDB module publishing workflow. This likely involves uploading the WASM binary to the SpacetimeDB cloud platform or a target host.
    *   The process should be identical to how it handles WASM modules generated from other languages (e.g., Rust) after their compilation step.
    *   The CLI will need to ensure that the module is correctly associated with the provided `<db_name_or_address>`.
5.  **Metadata (Implicit):**
    *   The reducer names and their expected argument structures are defined within the WASM module itself (via `export_name` attributes used by `SPACETIMEDB_REDUCER` macro). The host environment will discover these from the WASM module's export section at runtime or upon deployment.
    *   Table schema information (if needed by the publish process beyond what's in the WASM) would typically be part of the module's initialization logic or defined within the module's code (e.g., using `SPACETIMEDB_REGISTER_TABLE` which might eventually lead to initialization calls to the host). For a pre-compiled WASM, the CLI itself doesn't need to parse this C++ specific registration.

### Error Handling

The CLI should handle and report the following error conditions clearly:

*   **`--wasm-file` Argument Missing:** If `--wasm-file` is the chosen flag and it's not provided (and no other module source is given).
*   **WASM File Not Found:** If the path specified by `<path_to_wasm_file>` does not exist.
*   **WASM File Not Readable:** If the CLI lacks permissions to read the file.
*   **Invalid WASM File (Basic Check):** If a basic magic number check fails (optional).
*   **Missing Database Name:** If `<db_name_or_address>` is not provided.
*   **Upload/Publishing Errors:** Any errors from the SpacetimeDB backend during the upload or registration process (e.g., network issues, authentication failures, invalid database name, quota exceeded). These should be consistent with errors from other publish workflows.
*   **Module Rejection by Host:** If the host environment performs validation on the WASM module post-upload and rejects it (e.g., missing required imports like `_spacetimedb_sdk_init`, or disallowed imports/exports), the CLI should relay this feedback if possible.

### Example Usage

```bash
spacetime publish --wasm-file ./build/my_module.wasm --name my_awesome_game
```

```bash
spacetime publish --wasm-file /path/to/my_game_logic.wasm --name my_game_v1 --host https://custom.spacetimedb.net
```

This enhancement provides a direct path for C++ developers (and potentially others who can compile to a compatible WASM module) to deploy their logic to SpacetimeDB without requiring the `spacetime` CLI to understand C++ build systems.


# --- build_and_publish.sh ---
#!/bin/bash

# Exit immediately if a command exits with a non-zero status.
set -e

# --- Configuration ---
# Path to the CMake toolchain file for WASM (Emscripten)
# Assumes this script is in examples/user_module/ and toolchains dir is at ../../toolchains
TOOLCHAIN_FILE="../../toolchains/wasm_toolchain.cmake"

# Build directory
BUILD_DIR="build"

# Name of the output WASM file (must match add_executable target name in CMakeLists.txt)
WASM_OUTPUT_NAME="my_module.wasm"

# Name of the database to publish to on SpacetimeDB
DATABASE_NAME="my_cpp_game_module_test"

# --- Script Logic ---

# 1. Ensure the script is run from the correct directory (optional check)
# if [ ! -f "CMakeLists.txt" ]; then
#     echo "Error: Please run this script from the root of your user module project (e.g., examples/user_module/)"
#     exit 1
# fi

# 2. Create the build directory if it doesn't exist
echo "--- Creating build directory: ${BUILD_DIR} ---"
mkdir -p "${BUILD_DIR}"

# 3. Run CMake to configure the project
echo "--- Configuring CMake with Emscripten toolchain ---"
cmake -B "${BUILD_DIR}" -S . -DCMAKE_TOOLCHAIN_FILE="${TOOLCHAIN_FILE}"

# 4. Run CMake to build the project
echo "--- Building WASM module ---"
cmake --build "${BUILD_DIR}"

# 5. Check if the WASM file was created successfully
WASM_FILE_PATH="${BUILD_DIR}/${WASM_OUTPUT_NAME}"
if [ ! -f "${WASM_FILE_PATH}" ]; then
    echo "Error: WASM file not found at ${WASM_FILE_PATH} after build."
    exit 1
else
    echo "--- WASM module built successfully: ${WASM_FILE_PATH} ---"
fi

# 6. Run spacetime publish
echo "--- Publishing WASM module to SpacetimeDB as '${DATABASE_NAME}' ---"
spacetime publish --wasm-file "${WASM_FILE_PATH}" --name "${DATABASE_NAME}"
# Add any other necessary flags for your spacetime CLI, e.g., --credentials, --host

echo "--- Build and publish script completed successfully! ---"
